// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        And(a= instruction[15], b= true, out= isC);
        Not(in= isC, out= isA);

        And(a= isC, b= instruction[3], out= writeM);

        Mux16(a= aluOut, b= instruction, sel= isA, out= aLoadVal);
        And(a= isC, b= instruction[5], out= shldCInxLoadA);
        Or(a= isA, b= shldCInxLoadA, out= shldALoad);
        ARegister(in= aLoadVal, load= shldALoad, out= outA, out[0..14]= addressM);

        And(a= isC, b= instruction[4], out= shldDLoad);
        DRegister(in= aluOut, load= shldDLoad, out= outD);

        Mux16(a= outA, b= inM, sel= instruction[12], out= AorM);
        ALU(x= outD, y= AorM, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= aluOut, out= outM, zr= zr, ng= ng);

        
        And(a= instruction[2], b= isC, out= isNg);
        And(a= instruction[1], b= isC, out= isZr);
        And(a= instruction[0], b= isC, out= isPs);

        Not(in=ng, out=notNg);
        Not(in=zr, out=notZr);
        And(a=notNg, b=notZr, out=ps);

        And(a=isNg, b=ng, out=shldJmpNg);
        And(a=isZr, b=zr, out=shldJmpZr);
        And(a=isPs, b=ps, out=shldJmpPs);


        Or8Way(in[0]= shldJmpNg, in[1]= shldJmpZr, in[2]= shldJmpPs, out= shldJmp);

        Not(in= shldJmp, out= asd);
        PC(in= outA, load= shldJmp, inc= asd, reset= reset, out[0..14]= pc);   
}